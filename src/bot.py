import os
import logging
import asyncio
from telegram import Update, BotCommand
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters

# --- Logging setup ---
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s"
)
logger = logging.getLogger(__name__)

# –û—Ç–∫–ª—é—á–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–µ –ª–æ–≥–∏ python-telegram-bot –∏ urllib3
logging.getLogger("httpx").setLevel(logging.WARNING)
logging.getLogger("telegram.vendor.ptb_urllib3.urllib3").setLevel(logging.WARNING)
logging.getLogger("telegram.ext._application").setLevel(logging.WARNING)
logging.getLogger("telegram.ext._updater").setLevel(logging.WARNING)
logging.getLogger("telegram.bot").setLevel(logging.WARNING)
logging.getLogger("telegram.request").setLevel(logging.WARNING)
logging.getLogger("telegram.ext._extbot").setLevel(logging.WARNING)

BOT_TOKEN = os.environ['BOT_TOKEN']
ALLOWED_USERS = set(map(int, os.environ.get("ALLOWED_USERS", "").split(",")))

def is_allowed(user_id: int) -> bool:
    return not ALLOWED_USERS or user_id in ALLOWED_USERS

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not is_allowed(user_id):
        await update.message.reply_text(f"üö´ –î–æ—Å—Ç—É–ø –∑–∞–∫—Ä—ã—Ç. –í–∞—à user id: {user_id}")
        return
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –∑–∞–≥–æ—Ç–æ–≤–∫–∞ Telegram-–±–æ—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª.")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "ü§ñ *–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞:*\n"
        "/help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "\n"
        "üí¨ –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å ‚Äî –±–æ—Ç –æ—Ç–≤–µ—Ç–∏—Ç —à–∞–±–ª–æ–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º."
    )
    await update.message.reply_text(help_text, parse_mode="Markdown")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text
    logger.info(f"User {user_id} wrote: {text}")
    if not is_allowed(user_id):
        await update.message.reply_text(f"üö´ –î–æ—Å—Ç—É–ø –∑–∞–∫—Ä—ã—Ç. –í–∞—à user id: {user_id}")
        return

    await update.message.reply_text("üîé –ë–æ—Ç-–∑–∞–≥–æ—Ç–æ–≤–∫–∞: –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≤–∞—à –æ—Ç–≤–µ—Ç.")

def main():
    logger.info("Bot starting...")
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    commands = [
        BotCommand("help", "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"),
    ]
    asyncio.get_event_loop().run_until_complete(app.bot.set_my_commands(commands))

    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    logger.info("Application started")
    app.run_polling()

if __name__ == "__main__":
    main()